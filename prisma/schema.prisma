generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int         @id @default(autoincrement())
  isAdmin      Boolean     @default(false)
  isBanned     Boolean     @default(false)
  bannedReason String?
  steamID      String      @unique
  name         String
  avatar       String
  teamId       Int?
  team         Team?       @relation(fields: [teamId], references: [id])
  userStats    UserStats[]
  rating       Int         @default(6000)
}

model Team {
  id      Int    @id @default(autoincrement())
  ownerID String @unique
  name    String @unique
  players User[]
  logo    String

  Team1        Match[]     @relation("Team1")
  Team2        Match[]     @relation("Team2")
  Winner       Match[]     @relation("Winner")
  Tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId Int?
}

model Map {
  id           Int         @id @default(autoincrement())
  display_name String      @unique
  data_name    String      @unique
  preview      String
  UserStats    UserStats[]
  Match        Match[]
  Tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId Int?
}

model UserStats {
  id        Int    @id @default(autoincrement())
  steamID   String
  userId    Int
  user      User   @relation(fields: [userId], references: [id])
  kills     Int
  deaths    Int
  assists   Int
  headshots Int
  wins      Int
  losses    Int
  rounds    Int
  mvps      Int
  score     Int
  mapId     Int
  map       Map    @relation(fields: [mapId], references: [id])
  matchId   Int
  match     Match  @relation(fields: [matchId], references: [id])

  @@unique([steamID, mapId]) // Ensures that each user has unique stats per map
}

model Match {
  id           Int         @id @default(autoincrement())
  team1Id      Int
  team1        Team        @relation("Team1", fields: [team1Id], references: [id])
  team2Id      Int
  team2        Team        @relation("Team2", fields: [team2Id], references: [id])
  winnerId     Int
  winner       Team        @relation("Winner", fields: [winnerId], references: [id])
  mapId        Int
  map          Map         @relation(fields: [mapId], references: [id])
  team1Score   Int
  team2Score   Int
  date         DateTime
  tournamentId Int?
  Tournament   Tournament? @relation(fields: [tournamentId], references: [id])
  UserStats    UserStats[]
}

model Tournament {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  type         TournamentType @default(SingleElimination)
  logo         String
  banner       String
  matches      Match[]
  isActive     Boolean        @default(true)
  isPublic     Boolean        @default(true)
  isOpen       Boolean        @default(true)
  maxRating    Int
  startDate    DateTime
  endDate      DateTime
  teams        Team[]
  maxTeams     Int
  maps         Map[]
  formatConfig Json?
}

model Server {
  id           Int       @id @default(autoincrement())
  name         String
  host         String
  port         Int
  rconPassword String
  note         String    @default("")
  isEnabled    Boolean   @default(true)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  lastPingAt   DateTime?
  lastPingMs   Int?
  reachable    Boolean?

  @@unique([host, port])
}

enum TournamentType {
  RoundRobin
  SingleElimination
  DoubleElimination
  Swiss
}
